// Code generated by MockGen. DO NOT EDIT.
// Source: persistence.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/n7down/go-database-example/internal/interactions/persistence"
)

// MockPersistence is a mock of Persistence interface.
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence.
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance.
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// CreateInteraction mocks base method.
func (m *MockPersistence) CreateInteraction(interaction persistence.Interaction) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInteraction", interaction)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateInteraction indicates an expected call of CreateInteraction.
func (mr *MockPersistenceMockRecorder) CreateInteraction(interaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInteraction", reflect.TypeOf((*MockPersistence)(nil).CreateInteraction), interaction)
}

// GetInteraction mocks base method.
func (m *MockPersistence) GetInteraction(id string) (bool, persistence.Interaction) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteraction", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.Interaction)
	return ret0, ret1
}

// GetInteraction indicates an expected call of GetInteraction.
func (mr *MockPersistenceMockRecorder) GetInteraction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteraction", reflect.TypeOf((*MockPersistence)(nil).GetInteraction), id)
}

// GetAllInteractions mocks base method.
func (m *MockPersistence) GetAllInteractions(limit, offset int32) ([]persistence.Interaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInteractions", limit, offset)
	ret0, _ := ret[0].([]persistence.Interaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInteractions indicates an expected call of GetAllInteractions.
func (mr *MockPersistenceMockRecorder) GetAllInteractions(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInteractions", reflect.TypeOf((*MockPersistence)(nil).GetAllInteractions), limit, offset)
}

// GetAllInteractionsByPagination mocks base method.
func (m *MockPersistence) GetAllInteractionsByPagination(limit, offset int32) (persistence.GetAllInteractionsPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInteractionsByPagination", limit, offset)
	ret0, _ := ret[0].(persistence.GetAllInteractionsPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInteractionsByPagination indicates an expected call of GetAllInteractionsByPagination.
func (mr *MockPersistenceMockRecorder) GetAllInteractionsByPagination(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInteractionsByPagination", reflect.TypeOf((*MockPersistence)(nil).GetAllInteractionsByPagination), limit, offset)
}

// GetInteractionDetails mocks base method.
func (m *MockPersistence) GetInteractionDetails(id string) ([]persistence.InteractionDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteractionDetails", id)
	ret0, _ := ret[0].([]persistence.InteractionDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInteractionDetails indicates an expected call of GetInteractionDetails.
func (mr *MockPersistenceMockRecorder) GetInteractionDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteractionDetails", reflect.TypeOf((*MockPersistence)(nil).GetInteractionDetails), id)
}

// UpdateInteraction mocks base method.
func (m *MockPersistence) UpdateInteraction(interaction persistence.Interaction) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInteraction", interaction)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInteraction indicates an expected call of UpdateInteraction.
func (mr *MockPersistenceMockRecorder) UpdateInteraction(interaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteraction", reflect.TypeOf((*MockPersistence)(nil).UpdateInteraction), interaction)
}

// DeleteInteraction mocks base method.
func (m *MockPersistence) DeleteInteraction(interaction persistence.Interaction) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInteraction", interaction)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInteraction indicates an expected call of DeleteInteraction.
func (mr *MockPersistenceMockRecorder) DeleteInteraction(interaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInteraction", reflect.TypeOf((*MockPersistence)(nil).DeleteInteraction), interaction)
}

// CreateKeypadCondition mocks base method.
func (m *MockPersistence) CreateKeypadCondition(keypadCondition persistence.KeypadCondition) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeypadCondition", keypadCondition)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateKeypadCondition indicates an expected call of CreateKeypadCondition.
func (mr *MockPersistenceMockRecorder) CreateKeypadCondition(keypadCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeypadCondition", reflect.TypeOf((*MockPersistence)(nil).CreateKeypadCondition), keypadCondition)
}

// GetKeypadCondition mocks base method.
func (m *MockPersistence) GetKeypadCondition(id string) (bool, persistence.KeypadCondition) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeypadCondition", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.KeypadCondition)
	return ret0, ret1
}

// GetKeypadCondition indicates an expected call of GetKeypadCondition.
func (mr *MockPersistenceMockRecorder) GetKeypadCondition(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeypadCondition", reflect.TypeOf((*MockPersistence)(nil).GetKeypadCondition), id)
}

// GetKeypadConditionByMac mocks base method.
func (m *MockPersistence) GetKeypadConditionByMac(mac string) (bool, persistence.KeypadCondition) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeypadConditionByMac", mac)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.KeypadCondition)
	return ret0, ret1
}

// GetKeypadConditionByMac indicates an expected call of GetKeypadConditionByMac.
func (mr *MockPersistenceMockRecorder) GetKeypadConditionByMac(mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeypadConditionByMac", reflect.TypeOf((*MockPersistence)(nil).GetKeypadConditionByMac), mac)
}

// GetKeypadConditionByMacAndButtonID mocks base method.
func (m *MockPersistence) GetKeypadConditionByMacAndButtonID(mac string, buttonID int) (bool, persistence.KeypadCondition) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeypadConditionByMacAndButtonID", mac, buttonID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.KeypadCondition)
	return ret0, ret1
}

// GetKeypadConditionByMacAndButtonID indicates an expected call of GetKeypadConditionByMacAndButtonID.
func (mr *MockPersistenceMockRecorder) GetKeypadConditionByMacAndButtonID(mac, buttonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeypadConditionByMacAndButtonID", reflect.TypeOf((*MockPersistence)(nil).GetKeypadConditionByMacAndButtonID), mac, buttonID)
}

// UpdateKeypadCondition mocks base method.
func (m *MockPersistence) UpdateKeypadCondition(keypadCondition persistence.KeypadCondition) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeypadCondition", keypadCondition)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeypadCondition indicates an expected call of UpdateKeypadCondition.
func (mr *MockPersistenceMockRecorder) UpdateKeypadCondition(keypadCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeypadCondition", reflect.TypeOf((*MockPersistence)(nil).UpdateKeypadCondition), keypadCondition)
}

// DeleteKeypadCondition mocks base method.
func (m *MockPersistence) DeleteKeypadCondition(keypadCondition persistence.KeypadCondition) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeypadCondition", keypadCondition)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeypadCondition indicates an expected call of DeleteKeypadCondition.
func (mr *MockPersistenceMockRecorder) DeleteKeypadCondition(keypadCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeypadCondition", reflect.TypeOf((*MockPersistence)(nil).DeleteKeypadCondition), keypadCondition)
}

// CreateLampEvent mocks base method.
func (m *MockPersistence) CreateLampEvent(lampEvent persistence.LampEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampEvent", lampEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampEvent indicates an expected call of CreateLampEvent.
func (mr *MockPersistenceMockRecorder) CreateLampEvent(lampEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampEvent), lampEvent)
}

// GetLampEvent mocks base method.
func (m *MockPersistence) GetLampEvent(id string) (bool, persistence.LampEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampEvent)
	return ret0, ret1
}

// GetLampEvent indicates an expected call of GetLampEvent.
func (mr *MockPersistenceMockRecorder) GetLampEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampEvent), id)
}

// GetLampEventsByKeypadConditionID mocks base method.
func (m *MockPersistence) GetLampEventsByKeypadConditionID(id string) ([]persistence.LampEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampEventsByKeypadConditionID", id)
	ret0, _ := ret[0].([]persistence.LampEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLampEventsByKeypadConditionID indicates an expected call of GetLampEventsByKeypadConditionID.
func (mr *MockPersistenceMockRecorder) GetLampEventsByKeypadConditionID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampEventsByKeypadConditionID", reflect.TypeOf((*MockPersistence)(nil).GetLampEventsByKeypadConditionID), id)
}

// GetLampEventsByKeypadMacAndButtonID mocks base method.
func (m *MockPersistence) GetLampEventsByKeypadMacAndButtonID(mac string, buttonID int) ([]persistence.LampEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampEventsByKeypadMacAndButtonID", mac, buttonID)
	ret0, _ := ret[0].([]persistence.LampEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLampEventsByKeypadMacAndButtonID indicates an expected call of GetLampEventsByKeypadMacAndButtonID.
func (mr *MockPersistenceMockRecorder) GetLampEventsByKeypadMacAndButtonID(mac, buttonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampEventsByKeypadMacAndButtonID", reflect.TypeOf((*MockPersistence)(nil).GetLampEventsByKeypadMacAndButtonID), mac, buttonID)
}

// UpdateLampEvent mocks base method.
func (m *MockPersistence) UpdateLampEvent(lampEvent persistence.LampEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampEvent", lampEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampEvent indicates an expected call of UpdateLampEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampEvent(lampEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampEvent), lampEvent)
}

// DeleteLampEvent mocks base method.
func (m *MockPersistence) DeleteLampEvent(lampEvent persistence.LampEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampEvent", lampEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampEvent indicates an expected call of DeleteLampEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampEvent(lampEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampEvent), lampEvent)
}

// CreateLampOnEvent mocks base method.
func (m *MockPersistence) CreateLampOnEvent(lampOnEvent persistence.LampOnEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampOnEvent", lampOnEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampOnEvent indicates an expected call of CreateLampOnEvent.
func (mr *MockPersistenceMockRecorder) CreateLampOnEvent(lampOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampOnEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampOnEvent), lampOnEvent)
}

// GetLampOnEvent mocks base method.
func (m *MockPersistence) GetLampOnEvent(id string) (bool, persistence.LampOnEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampOnEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampOnEvent)
	return ret0, ret1
}

// GetLampOnEvent indicates an expected call of GetLampOnEvent.
func (mr *MockPersistenceMockRecorder) GetLampOnEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampOnEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampOnEvent), id)
}

// UpdateLampOnEvent mocks base method.
func (m *MockPersistence) UpdateLampOnEvent(lampOnEvent persistence.LampOnEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampOnEvent", lampOnEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampOnEvent indicates an expected call of UpdateLampOnEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampOnEvent(lampOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampOnEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampOnEvent), lampOnEvent)
}

// DeleteLampOnEvent mocks base method.
func (m *MockPersistence) DeleteLampOnEvent(lampOnEvent persistence.LampOnEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampOnEvent", lampOnEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampOnEvent indicates an expected call of DeleteLampOnEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampOnEvent(lampOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampOnEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampOnEvent), lampOnEvent)
}

// CreateLampOffEvent mocks base method.
func (m *MockPersistence) CreateLampOffEvent(lampOffEvent persistence.LampOffEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampOffEvent", lampOffEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampOffEvent indicates an expected call of CreateLampOffEvent.
func (mr *MockPersistenceMockRecorder) CreateLampOffEvent(lampOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampOffEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampOffEvent), lampOffEvent)
}

// GetLampOffEvent mocks base method.
func (m *MockPersistence) GetLampOffEvent(id string) (bool, persistence.LampOffEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampOffEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampOffEvent)
	return ret0, ret1
}

// GetLampOffEvent indicates an expected call of GetLampOffEvent.
func (mr *MockPersistenceMockRecorder) GetLampOffEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampOffEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampOffEvent), id)
}

// UpdateLampOffEvent mocks base method.
func (m *MockPersistence) UpdateLampOffEvent(lampOffEvent persistence.LampOffEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampOffEvent", lampOffEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampOffEvent indicates an expected call of UpdateLampOffEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampOffEvent(lampOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampOffEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampOffEvent), lampOffEvent)
}

// DeleteLampOffEvent mocks base method.
func (m *MockPersistence) DeleteLampOffEvent(lampOffEvent persistence.LampOffEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampOffEvent", lampOffEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampOffEvent indicates an expected call of DeleteLampOffEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampOffEvent(lampOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampOffEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampOffEvent), lampOffEvent)
}

// CreateLampToggleEvent mocks base method.
func (m *MockPersistence) CreateLampToggleEvent(lampToggleEvent persistence.LampToggleEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampToggleEvent", lampToggleEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampToggleEvent indicates an expected call of CreateLampToggleEvent.
func (mr *MockPersistenceMockRecorder) CreateLampToggleEvent(lampToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampToggleEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampToggleEvent), lampToggleEvent)
}

// GetLampToggleEvent mocks base method.
func (m *MockPersistence) GetLampToggleEvent(id string) (bool, persistence.LampToggleEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampToggleEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampToggleEvent)
	return ret0, ret1
}

// GetLampToggleEvent indicates an expected call of GetLampToggleEvent.
func (mr *MockPersistenceMockRecorder) GetLampToggleEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampToggleEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampToggleEvent), id)
}

// UpdateLampToggleEvent mocks base method.
func (m *MockPersistence) UpdateLampToggleEvent(lampToggleEvent persistence.LampToggleEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampToggleEvent", lampToggleEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampToggleEvent indicates an expected call of UpdateLampToggleEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampToggleEvent(lampToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampToggleEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampToggleEvent), lampToggleEvent)
}

// DeleteLampToggleEvent mocks base method.
func (m *MockPersistence) DeleteLampToggleEvent(lampToggleEvent persistence.LampToggleEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampToggleEvent", lampToggleEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampToggleEvent indicates an expected call of DeleteLampToggleEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampToggleEvent(lampToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampToggleEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampToggleEvent), lampToggleEvent)
}

// CreateLampBrightnessEvent mocks base method.
func (m *MockPersistence) CreateLampBrightnessEvent(lampBrightnessEvent persistence.LampBrightnessEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampBrightnessEvent", lampBrightnessEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampBrightnessEvent indicates an expected call of CreateLampBrightnessEvent.
func (mr *MockPersistenceMockRecorder) CreateLampBrightnessEvent(lampBrightnessEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampBrightnessEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampBrightnessEvent), lampBrightnessEvent)
}

// GetLampBrightnessEvent mocks base method.
func (m *MockPersistence) GetLampBrightnessEvent(id string) (bool, persistence.LampBrightnessEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampBrightnessEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampBrightnessEvent)
	return ret0, ret1
}

// GetLampBrightnessEvent indicates an expected call of GetLampBrightnessEvent.
func (mr *MockPersistenceMockRecorder) GetLampBrightnessEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampBrightnessEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampBrightnessEvent), id)
}

// UpdateLampBrightnessEvent mocks base method.
func (m *MockPersistence) UpdateLampBrightnessEvent(lampBrightnessEvent persistence.LampBrightnessEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampBrightnessEvent", lampBrightnessEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampBrightnessEvent indicates an expected call of UpdateLampBrightnessEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampBrightnessEvent(lampBrightnessEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampBrightnessEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampBrightnessEvent), lampBrightnessEvent)
}

// DeleteLampBrightnessEvent mocks base method.
func (m *MockPersistence) DeleteLampBrightnessEvent(lampBrightnessEvent persistence.LampBrightnessEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampBrightnessEvent", lampBrightnessEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampBrightnessEvent indicates an expected call of DeleteLampBrightnessEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampBrightnessEvent(lampBrightnessEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampBrightnessEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampBrightnessEvent), lampBrightnessEvent)
}

// CreateLampAutoBrightnessOnEvent mocks base method.
func (m *MockPersistence) CreateLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent persistence.LampAutoBrightnessOnEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampAutoBrightnessOnEvent", lampAutoBrightnessOnEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampAutoBrightnessOnEvent indicates an expected call of CreateLampAutoBrightnessOnEvent.
func (mr *MockPersistenceMockRecorder) CreateLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampAutoBrightnessOnEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampAutoBrightnessOnEvent), lampAutoBrightnessOnEvent)
}

// GetLampAutoBrightnessOnEvent mocks base method.
func (m *MockPersistence) GetLampAutoBrightnessOnEvent(id string) (bool, persistence.LampAutoBrightnessOnEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampAutoBrightnessOnEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampAutoBrightnessOnEvent)
	return ret0, ret1
}

// GetLampAutoBrightnessOnEvent indicates an expected call of GetLampAutoBrightnessOnEvent.
func (mr *MockPersistenceMockRecorder) GetLampAutoBrightnessOnEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampAutoBrightnessOnEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampAutoBrightnessOnEvent), id)
}

// UpdateLampAutoBrightnessOnEvent mocks base method.
func (m *MockPersistence) UpdateLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent persistence.LampAutoBrightnessOnEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampAutoBrightnessOnEvent", lampAutoBrightnessOnEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampAutoBrightnessOnEvent indicates an expected call of UpdateLampAutoBrightnessOnEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampAutoBrightnessOnEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampAutoBrightnessOnEvent), lampAutoBrightnessOnEvent)
}

// DeleteLampAutoBrightnessOnEvent mocks base method.
func (m *MockPersistence) DeleteLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent persistence.LampAutoBrightnessOnEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampAutoBrightnessOnEvent", lampAutoBrightnessOnEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampAutoBrightnessOnEvent indicates an expected call of DeleteLampAutoBrightnessOnEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampAutoBrightnessOnEvent(lampAutoBrightnessOnEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampAutoBrightnessOnEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampAutoBrightnessOnEvent), lampAutoBrightnessOnEvent)
}

// CreateLampAutoBrightnessOffEvent mocks base method.
func (m *MockPersistence) CreateLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent persistence.LampAutoBrightnessOffEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampAutoBrightnessOffEvent", lampAutoBrightnessOffEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampAutoBrightnessOffEvent indicates an expected call of CreateLampAutoBrightnessOffEvent.
func (mr *MockPersistenceMockRecorder) CreateLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampAutoBrightnessOffEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampAutoBrightnessOffEvent), lampAutoBrightnessOffEvent)
}

// GetLampAutoBrightnessOffEvent mocks base method.
func (m *MockPersistence) GetLampAutoBrightnessOffEvent(id string) (bool, persistence.LampAutoBrightnessOffEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampAutoBrightnessOffEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampAutoBrightnessOffEvent)
	return ret0, ret1
}

// GetLampAutoBrightnessOffEvent indicates an expected call of GetLampAutoBrightnessOffEvent.
func (mr *MockPersistenceMockRecorder) GetLampAutoBrightnessOffEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampAutoBrightnessOffEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampAutoBrightnessOffEvent), id)
}

// UpdateLampAutoBrightnessOffEvent mocks base method.
func (m *MockPersistence) UpdateLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent persistence.LampAutoBrightnessOffEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampAutoBrightnessOffEvent", lampAutoBrightnessOffEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampAutoBrightnessOffEvent indicates an expected call of UpdateLampAutoBrightnessOffEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampAutoBrightnessOffEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampAutoBrightnessOffEvent), lampAutoBrightnessOffEvent)
}

// DeleteLampAutoBrightnessOffEvent mocks base method.
func (m *MockPersistence) DeleteLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent persistence.LampAutoBrightnessOffEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampAutoBrightnessOffEvent", lampAutoBrightnessOffEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampAutoBrightnessOffEvent indicates an expected call of DeleteLampAutoBrightnessOffEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampAutoBrightnessOffEvent(lampAutoBrightnessOffEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampAutoBrightnessOffEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampAutoBrightnessOffEvent), lampAutoBrightnessOffEvent)
}

// CreateLampAutoBrightnessToggleEvent mocks base method.
func (m *MockPersistence) CreateLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent persistence.LampAutoBrightnessToggleEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampAutoBrightnessToggleEvent", lampAutoBrightnessToggleEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampAutoBrightnessToggleEvent indicates an expected call of CreateLampAutoBrightnessToggleEvent.
func (mr *MockPersistenceMockRecorder) CreateLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampAutoBrightnessToggleEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampAutoBrightnessToggleEvent), lampAutoBrightnessToggleEvent)
}

// GetLampAutoBrightnessToggleEvent mocks base method.
func (m *MockPersistence) GetLampAutoBrightnessToggleEvent(id string) (bool, persistence.LampAutoBrightnessToggleEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampAutoBrightnessToggleEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampAutoBrightnessToggleEvent)
	return ret0, ret1
}

// GetLampAutoBrightnessToggleEvent indicates an expected call of GetLampAutoBrightnessToggleEvent.
func (mr *MockPersistenceMockRecorder) GetLampAutoBrightnessToggleEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampAutoBrightnessToggleEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampAutoBrightnessToggleEvent), id)
}

// UpdateLampAutoBrightnessToggleEvent mocks base method.
func (m *MockPersistence) UpdateLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent persistence.LampAutoBrightnessToggleEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampAutoBrightnessToggleEvent", lampAutoBrightnessToggleEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampAutoBrightnessToggleEvent indicates an expected call of UpdateLampAutoBrightnessToggleEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampAutoBrightnessToggleEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampAutoBrightnessToggleEvent), lampAutoBrightnessToggleEvent)
}

// DeleteLampAutoBrightnessToggleEvent mocks base method.
func (m *MockPersistence) DeleteLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent persistence.LampAutoBrightnessToggleEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampAutoBrightnessToggleEvent", lampAutoBrightnessToggleEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampAutoBrightnessToggleEvent indicates an expected call of DeleteLampAutoBrightnessToggleEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampAutoBrightnessToggleEvent(lampAutoBrightnessToggleEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampAutoBrightnessToggleEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampAutoBrightnessToggleEvent), lampAutoBrightnessToggleEvent)
}

// CreateLampColorEvent mocks base method.
func (m *MockPersistence) CreateLampColorEvent(lampColorEvent persistence.LampColorEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampColorEvent", lampColorEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampColorEvent indicates an expected call of CreateLampColorEvent.
func (mr *MockPersistenceMockRecorder) CreateLampColorEvent(lampColorEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampColorEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampColorEvent), lampColorEvent)
}

// GetLampColorEvent mocks base method.
func (m *MockPersistence) GetLampColorEvent(id string) (bool, persistence.LampColorEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampColorEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampColorEvent)
	return ret0, ret1
}

// GetLampColorEvent indicates an expected call of GetLampColorEvent.
func (mr *MockPersistenceMockRecorder) GetLampColorEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampColorEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampColorEvent), id)
}

// UpdateLampColorEvent mocks base method.
func (m *MockPersistence) UpdateLampColorEvent(lampColorEvent persistence.LampColorEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampColorEvent", lampColorEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampColorEvent indicates an expected call of UpdateLampColorEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampColorEvent(lampColorEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampColorEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampColorEvent), lampColorEvent)
}

// DeleteLampColorEvent mocks base method.
func (m *MockPersistence) DeleteLampColorEvent(lampColorEvent persistence.LampColorEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampColorEvent", lampColorEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampColorEvent indicates an expected call of DeleteLampColorEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampColorEvent(lampColorEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampColorEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampColorEvent), lampColorEvent)
}

// CreateLampPulseEvent mocks base method.
func (m *MockPersistence) CreateLampPulseEvent(lampPulseEvent persistence.LampPulseEvent) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLampPulseEvent", lampPulseEvent)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateLampPulseEvent indicates an expected call of CreateLampPulseEvent.
func (mr *MockPersistenceMockRecorder) CreateLampPulseEvent(lampPulseEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLampPulseEvent", reflect.TypeOf((*MockPersistence)(nil).CreateLampPulseEvent), lampPulseEvent)
}

// GetLampPulseEvent mocks base method.
func (m *MockPersistence) GetLampPulseEvent(id string) (bool, persistence.LampPulseEvent) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLampPulseEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.LampPulseEvent)
	return ret0, ret1
}

// GetLampPulseEvent indicates an expected call of GetLampPulseEvent.
func (mr *MockPersistenceMockRecorder) GetLampPulseEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLampPulseEvent", reflect.TypeOf((*MockPersistence)(nil).GetLampPulseEvent), id)
}

// UpdateLampPulseEvent mocks base method.
func (m *MockPersistence) UpdateLampPulseEvent(lampPulseEvent persistence.LampPulseEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLampPulseEvent", lampPulseEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLampPulseEvent indicates an expected call of UpdateLampPulseEvent.
func (mr *MockPersistenceMockRecorder) UpdateLampPulseEvent(lampPulseEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLampPulseEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateLampPulseEvent), lampPulseEvent)
}

// DeleteLampPulseEvent mocks base method.
func (m *MockPersistence) DeleteLampPulseEvent(lampPulseEvent persistence.LampPulseEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLampPulseEvent", lampPulseEvent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLampPulseEvent indicates an expected call of DeleteLampPulseEvent.
func (mr *MockPersistenceMockRecorder) DeleteLampPulseEvent(lampPulseEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLampPulseEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteLampPulseEvent), lampPulseEvent)
}

// CreateConditionsToEvents mocks base method.
func (m *MockPersistence) CreateConditionsToEvents(conditionsToEvents persistence.ConditionsToEvents) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConditionsToEvents", conditionsToEvents)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateConditionsToEvents indicates an expected call of CreateConditionsToEvents.
func (mr *MockPersistenceMockRecorder) CreateConditionsToEvents(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConditionsToEvents", reflect.TypeOf((*MockPersistence)(nil).CreateConditionsToEvents), conditionsToEvents)
}

// GetConditionsToEvents mocks base method.
func (m *MockPersistence) GetConditionsToEvents(id string) (bool, persistence.ConditionsToEvents) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditionsToEvents", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.ConditionsToEvents)
	return ret0, ret1
}

// GetConditionsToEvents indicates an expected call of GetConditionsToEvents.
func (mr *MockPersistenceMockRecorder) GetConditionsToEvents(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditionsToEvents", reflect.TypeOf((*MockPersistence)(nil).GetConditionsToEvents), id)
}

// UpdateConditionsToEvents mocks base method.
func (m *MockPersistence) UpdateConditionsToEvents(conditionsToEvents persistence.ConditionsToEvents) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConditionsToEvents", conditionsToEvents)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConditionsToEvents indicates an expected call of UpdateConditionsToEvents.
func (mr *MockPersistenceMockRecorder) UpdateConditionsToEvents(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConditionsToEvents", reflect.TypeOf((*MockPersistence)(nil).UpdateConditionsToEvents), conditionsToEvents)
}

// DeleteConditionsToEvents mocks base method.
func (m *MockPersistence) DeleteConditionsToEvents(conditionsToEvents persistence.ConditionsToEvents) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConditionsToEvents", conditionsToEvents)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConditionsToEvents indicates an expected call of DeleteConditionsToEvents.
func (mr *MockPersistenceMockRecorder) DeleteConditionsToEvents(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConditionsToEvents", reflect.TypeOf((*MockPersistence)(nil).DeleteConditionsToEvents), conditionsToEvents)
}

// CreateKeypadConditionToLampEvent mocks base method.
func (m *MockPersistence) CreateKeypadConditionToLampEvent(conditionsToEvents persistence.KeypadConditionsToLampEvents) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeypadConditionToLampEvent", conditionsToEvents)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CreateKeypadConditionToLampEvent indicates an expected call of CreateKeypadConditionToLampEvent.
func (mr *MockPersistenceMockRecorder) CreateKeypadConditionToLampEvent(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeypadConditionToLampEvent", reflect.TypeOf((*MockPersistence)(nil).CreateKeypadConditionToLampEvent), conditionsToEvents)
}

// GetKeypadConditionToLampEvent mocks base method.
func (m *MockPersistence) GetKeypadConditionToLampEvent(id string) (bool, persistence.KeypadConditionsToLampEvents) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeypadConditionToLampEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(persistence.KeypadConditionsToLampEvents)
	return ret0, ret1
}

// GetKeypadConditionToLampEvent indicates an expected call of GetKeypadConditionToLampEvent.
func (mr *MockPersistenceMockRecorder) GetKeypadConditionToLampEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeypadConditionToLampEvent", reflect.TypeOf((*MockPersistence)(nil).GetKeypadConditionToLampEvent), id)
}

// UpdateKeypadConditionToLampEvent mocks base method.
func (m *MockPersistence) UpdateKeypadConditionToLampEvent(conditionsToEvents persistence.KeypadConditionsToLampEvents) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeypadConditionToLampEvent", conditionsToEvents)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeypadConditionToLampEvent indicates an expected call of UpdateKeypadConditionToLampEvent.
func (mr *MockPersistenceMockRecorder) UpdateKeypadConditionToLampEvent(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeypadConditionToLampEvent", reflect.TypeOf((*MockPersistence)(nil).UpdateKeypadConditionToLampEvent), conditionsToEvents)
}

// DeleteKeypadConditionToLampEvent mocks base method.
func (m *MockPersistence) DeleteKeypadConditionToLampEvent(conditionsToEvents persistence.KeypadConditionsToLampEvents) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeypadConditionToLampEvent", conditionsToEvents)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeypadConditionToLampEvent indicates an expected call of DeleteKeypadConditionToLampEvent.
func (mr *MockPersistenceMockRecorder) DeleteKeypadConditionToLampEvent(conditionsToEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeypadConditionToLampEvent", reflect.TypeOf((*MockPersistence)(nil).DeleteKeypadConditionToLampEvent), conditionsToEvents)
}
